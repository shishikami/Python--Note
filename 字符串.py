'''
字符串：
字符串基本数据类型，不可变序列

驻留机制：仅保存一份相同且不可变字符串的方法
不同的值被存放在字符串的驻留池
后续创建相同字符串时不开辟新空间 把该字符串的地址赋给新创建的变量
'''

s1 = 'python'
s2 = 'python'
print(id(s1), id(s2))
'''
主流机制的几种情况（交互模式）
字符串长度为0/1时
符合标识符的字符串：字母数字下划线
字符串只在编译时进行驻留，而非运行时
[-5，256]之间的整数数字

sys中的intern方法强制两个字符串指向同一对象
pyCharm对字符串进行了优化处理
'''
s3 = ''
s4 = ''
print(id(s3) == id(s4))
'''
需要相同字符串时直接从字符串池中拿来用，避免频繁的创建和销毁
提升效率，节约内存
--拼接字符串和修改字符串是比较影响性能的
进行字符串拼接时尽量使用str的join方法，而不是+
因为join()先计算出所有字符串的长度，然后再拷贝
只new一次对象，效率更高
'''
'''
字符串查询操作
index() 查找子串第一次出现的位置 不存在抛出ValueError
rindex() 查找子串最后一次出现的位置 不存在抛出ValueError
find() 查找子串第一次出现的位置 不存在返回-1
rfind() 查找子串最后一次出现的位置 不存在返回-1

大小写转换操作
upper() 所有字符大写
lower() 所有字符小写
swapcase() 大小写互换
capitalize() 第一个字符转为大写 其余小写
title() 每个单词第一个字符大写 其余的小写
不论结果是否和原先的相同，均产生新字符串
'''

print(str.capitalize("PyTorch Python"))
print(str.title("PyTorch python"))
'''
字符串内容对其操作
center() 居中对齐 第一个参数指定宽度 第二个参数(可选)指定填充符，默认空格
如果设置参数小于实际宽度返回原字符串
ljust() 左对齐，其余同上
rjust() 右对齐，其余同上
zfill() 右对齐 左边用0填充，仅接受一个参数用于指定字符串宽度
小于字符串长度则返回字符串本身
其中 + 和 - 会被置于前头

字符串劈分操作
split() 从字符串左边开始劈分，默认劈分字符串为空格，返回值为列表
可以通过参数sep指定劈分符
通过参数maxsplit指定最大劈分次数，剩余部分单独做子串
rsplit() 从字符串左边开始劈分 其余同上

判断字符串操作方法
isidentifier() 是否合法标识符
isspace() 是否全部由空白字符组成 回车 换行 水平制表符
isalpha() 是否全部字母组成
isdecimal() 是否十进制数字
isnumeric() 是否全部数字
isalnum() 全部由字母和数字组成

其他方法
replace() 第一个参数指定被替换的子串，第二个参数指定替换子串的字符串
方法返回替换后得到的字符串，替换前的字符串不发生变化
可通过第三个参数指定最大替换次数
join() 将列表或元组中的字符串合并成一个字符串
第一个参数用作拼接符
'''
'''
字符串的比较操作
> >= < <= == !=
先比较第一个字符，相等则接着比较后续，直到比较出结果
比较出结果后后续字符不再考虑
比较ordinal value 用内置函数ord()获取
chr()指定ordinal value时可以获取对应字符

== 与 is 的区别
== 比较 value
is 比较 id是否相等
'''
'''
字符串切片操作
字符串不可变类型，不能增删改，切片产生新对象

格式化字符串
两种方式

%占位符
%d 整数
%10d 10表示宽度
%f 浮点数
%.3f .3 保留三位小数
%10.3f 宽度为10，保留三位小数

{}占位符
{0:.3} .3 三位数
{0:.3f} .3f 三位小数
{0:10.3f} .3f 十位，三位小数
'''
name = 'Zhangsan'
age = 12
print('我叫%s,今年%d岁' % (name, age))
print('我叫{},今年{}岁'.format(name, age))
print(f'我叫{name},今年{age}岁')
'''
字符串编码转换
encode(encoding='')
编码:字符串转换为二进制数据(bytes)
decode(encoding='')
解码:将bytes转化为字符串
'''
