'''
python解释器使用编码:Unicode 内存
.py文件在磁盘上:UTF-8 外存

文件读写：
file = open(filename[,mode,encoding])
模式默认为只读
默认文本文件中字符的编写格式是gbk

文件类型：
1.文本文件:存储普通字符文本，默认为unicode字符集
可以使用记事本程序打开
2.二级制文件:数据内容用字节进行存储，无法使用记事本等软件
需要专业软件打开

打开模式：
r:只读 文件指针在文件开头
w:只写 文件不存在则创建；存在则覆盖原有内容，指针在开头
a:追加模式 文件不存在则创建；存在则指针放在文件末尾
b:以二进制方式打开文件 不能单独使用，需要配合其他模式
+:以读写方式打开文件 不能单独使用 要与其他模式一起

常用方法：
read([size]):从文件中读取size个字节或字符内容，省略则读到文件末尾
readline:读取一行
readlines():每行当作独立字符串，返回字符串列表
write(str):str写入文件
writelines(s_list):字符串列表s_list写入文件，不加换行符
seek(offset[,whence]):文件指针移动到指定位置，offset表示相对于whence的位置
offset为正往结束方向移动
whence不同值有不同含义:
0:文件头(默认值)
1:当前位置
2:文件尾
tell():返回文件指针位置
flush():缓冲区内容写入文件，不关闭文件
close():缓冲区内容写入文件，关闭文件

'''
'''
with语句 自动化管理上下文资源，不论什么原因退出
with open() [as xxx]:
创建上下文管理器，自动调用__enter__()方法
离开时自动调用__exit__()

一个类实现了特殊方法__enter__() __exit__()称其从遵守了上下文管理器协议
其实例对象成为上下文管理器

os模块
import os
os.system('xxx.exe')
'''
